// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

// ‚ö†Ô∏è Erros personalizados: barateiam gas e padronizam mensagens
error NotOwner();
error ZeroAmount();
error NotAllowed();
error ReentrancyDetected();

// üí° Objetivo:
// - Qualquer pessoa pode depositar ETH (receive/deposit).
// - O "dono" (owner) pode definir uma allowance (autoriza√ß√£o) para que
// determinadas contas possam "puxar" (pull) valores do cofre.
// - Padr√£o "Pull over Push": o usu√°rio pega o dinheiro na quantidade autorizada,
// - pullAttack() √© vulner√°vel a reentr√¢ncia porque n√£o tem modifier noReentrancy

contract SafePiggy {
    // ‚úîÔ∏è owner: imut√°vel ap√≥s o deploy
    address public immutable owner;

    // ‚úîÔ∏è mapping: chave -> valor (n√£o iter√°vel)
    // Guarda quanto cada endere√ßo est√° autorizado a sacar via pull()
    mapping(address => uint256) public allowance;

    // üîí Prote√ß√£o contra reentr√¢ncia
    // Estado que previne chamadas recursivas maliciosas
    bool private locked;

    // ‚úîÔ∏è Eventos: facilitam auditoria e UX das dApps
    event Deposited(address indexed from, uint256 amount);
    event AllowanceSet(address indexed who, uint256 amount);
    event Pulled(address indexed who, uint256 amount);
    event FallbackCalled(address indexed from, uint256 value, bytes data);

    // ‚úîÔ∏è Modifier: pr√©-condi√ß√£o reutiliz√°vel
    modifier onlyOwner() {
        if (msg.sender != owner) revert NotOwner();
        _;
    }

    // üîí Modifier anti-reentr√¢ncia: previne ataques de reentr√¢ncia
    //
    // COMO FUNCIONA:
    // 1. locked = false (inicial)
    // 2. Fun√ß√£o √© chamada ‚Üí locked = true
    // 3. Durante execu√ß√£o, se houver call externo malicioso:
    //    - O call tenta chamar a mesma fun√ß√£o novamente
    //    - locked j√° √© true ‚Üí revert ReentrancyDetected()
    // 4. Fun√ß√£o termina ‚Üí locked = false
    //
    // EXEMPLO DE ATAQUE SEM PROTE√á√ÉO:
    // 1. Usu√°rio chama pull() ‚Üí recebe ETH
    // 2. Seu contrato malicioso recebe ETH no receive()
    // 3. receive() chama pull() novamente ‚Üí recebe mais ETH
    // 4. Repete at√© esgotar o contrato
    //
    // COM PROTE√á√ÉO:
    // 1. Usu√°rio chama pull() ‚Üí locked = true ‚Üí recebe ETH
    // 2. Contrato malicioso tenta pull() novamente
    // 3. locked = true ‚Üí revert ReentrancyDetected() ‚ùå
    modifier noReentrancy() {
        if (locked) revert ReentrancyDetected();
        locked = true;
        _;
        locked = false;
    }

    // ‚úîÔ∏è constructor: define o owner no momento do deploy
    constructor() {
        owner = msg.sender;
    }

    // ‚úîÔ∏è receive: aceita ETH enviado sem data (ex.: transfer/call simples)
    // Atualiza nada al√©m do log; o saldo do contrato muda automaticamente
    receive() external payable {
        if (msg.value == 0) revert ZeroAmount();
        emit Deposited(msg.sender, msg.value);
    }

    // ‚úîÔ∏è fallback: chamada quando n√£o existe fun√ß√£o correspondente √† assinatura
    // √ötil para registrar chamadas inesperadas e n√£o perder ETH enviado com data
    fallback() external payable {
        // Podemos aceitar ETH aqui tamb√©m se for "payable"
        // (n√£o √© obrigat√≥rio mexer em allowance)
        emit FallbackCalled(msg.sender, msg.value, msg.data);
    }

    // ‚úîÔ∏è Fun√ß√£o de dep√≥sito expl√≠cita (tamb√©m aceita ETH)
    function deposit() external payable {
        if (msg.value == 0) revert ZeroAmount();
        emit Deposited(msg.sender, msg.value);
    }

    // ‚úîÔ∏è Define a autoriza√ß√£o (em wei) para um endere√ßo sacar via pull()
    // ‚ö†Ô∏è ATEN√á√ÉO: amount deve ser em wei (1 ETH = 1e18 wei)
    // üí° IMPORTANTE: Allowance √© INDEPENDENTE do dep√≥sito do usu√°rio
    // O owner pode autorizar qualquer valor, mesmo que o usu√°rio n√£o tenha depositado
    function setAllowance(address who, uint256 amount) external onlyOwner {
        allowance[who] = amount; // storage: persiste na blockchain
        emit AllowanceSet(who, amount);
    }

    // ‚úîÔ∏è Fun√ß√£o auxiliar para definir allowance em ETH (mais f√°cil de usar)
    // üí° IMPORTANTE: Allowance √© INDEPENDENTE do dep√≥sito do usu√°rio
    // O owner pode autorizar qualquer valor, mesmo que o usu√°rio n√£o tenha depositado
    function setAllowanceInEth(address who, uint256 ethAmount) external onlyOwner {
        allowance[who] = ethAmount * 1e18; // Converte ETH para wei
        emit AllowanceSet(who, allowance[who]);
    }

    // ‚úîÔ∏è Usu√°rio autorizado "puxa" seu pr√≥prio valor (Pull over Push)
    // Padr√£o CEI (Checks-Effects-Interactions) demonstrado
    // üîí Protegido contra reentr√¢ncia com noReentrancy modifier
    function pull() external noReentrancy {
        uint256 amount = allowance[msg.sender];
        if (amount == 0) revert NotAllowed();

        // Verificar se o contrato tem saldo suficiente
        if (address(this).balance < amount) revert NotAllowed();

        // Effects: atualizar estado ANTES da intera√ß√£o externa
        allowance[msg.sender] = 0;

        // Interactions: transfer√™ncia de ETH (externa) no final
        // ‚ö†Ô∏è ATEN√á√ÉO: Ainda vulner√°vel a reentr√¢ncia se o receiver for um contrato malicioso
        (bool ok,) = payable(msg.sender).call{value: amount}("");
        require(ok, "transfer failed");

        emit Pulled(msg.sender, amount);
    }

    function pullAttack() external {
        uint256 amount = allowance[msg.sender];
        if (amount == 0) revert NotAllowed();

        // Verificar se o contrato tem saldo suficiente
        if (address(this).balance < amount) revert NotAllowed();

        // üö® VULNER√ÅVEL: Call externo ANTES de zerar o allowance
        // Isso permite reentr√¢ncia porque o allowance ainda n√£o foi zerado
        (bool ok,) = payable(msg.sender).call{value: amount}("");
        require(ok, "transfer failed");

        // üö® VULNER√ÅVEL: Zerar allowance DEPOIS da transfer√™ncia
        // O atacante pode chamar pullAttack() novamente antes desta linha
        allowance[msg.sender] = 0;

        emit Pulled(msg.sender, amount);
    }

    // ‚úîÔ∏è Fun√ß√£o de leitura (view): n√£o altera estado
    function contractBalance() external view returns (uint256) {
        // address(this).balance l√™ o saldo em wei deste contrato
        return address(this).balance;
    }

    // ‚úîÔ∏è Getters p√∫blicos: o Solidity gera automaticamente para vari√°veis public,
    // ent√£o allowance(who) j√° √© vis√≠vel. Exemplo mantido para clareza did√°tica.
    function getAllowance(address who) external view returns (uint256) {
        return allowance[who];
    }
}
